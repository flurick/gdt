[gd_scene load_steps=5 format=3 uid="uid://37spsehmnb2t"]

[ext_resource type="Texture2D" uid="uid://coakjkpxt0v7g" path="res://icon.png" id="1_yac6u"]
[ext_resource type="Texture2D" uid="uid://bc0mkywg51pch" path="res://png/painticons.png" id="2_5bpbu"]

[sub_resource type="GDScript" id="2"]
script/source = "extends Control


var M = get_rect().size*0.5 #the Middle/center of this scrollbox control
var v = Vector2(0,0) #current scrolling velecity
var r = 0 #rotaional veclocity
var just_stop_under = 1
var multi = -4 #speed of one scroll \"click\"
var is_grabbed = false
var is_grabbed_for_rotation = false
@export var debug = false


func _process(delta):
	v *= 0.9
	if v.length() <= just_stop_under: v = Vector2(0,0)
	$origin.position += v
	
	r *= 0.99
	$origin.rotation += r
	


func _gui_input(event):
	
	if event is InputEventMouseButton:
		match event.button_index:
			MOUSE_BUTTON_MIDDLE:	is_grabbed = event.pressed
			MOUSE_BUTTON_RIGHT:	is_grabbed_for_rotation = event.pressed
	
	if event is InputEventMouseMotion:
		if is_grabbed:	v = event.relative
		if is_grabbed_for_rotation:
			if event.position.x > M.x: 
				r += event.relative.y * 0.01
			else: 
				r -= event.relative.y * 0.01
			if event.position.y > M.y: 
				r -= event.relative.x * 0.01
			else: 
				r += event.relative.x * 0.01
	
	if event is InputEventMouseButton:
		match event.button_index:
			MOUSE_BUTTON_WHEEL_DOWN:	v.y += multi
			MOUSE_BUTTON_WHEEL_UP: 	v.y -= multi
			MOUSE_BUTTON_WHEEL_RIGHT:	v.x += multi
			MOUSE_BUTTON_WHEEL_LEFT:	v.x -= multi"

[sub_resource type="GDScript" id="3"]
script/source = "extends TextureRect


var img = Image.new()
var itex = ImageTexture.new()
@export var fg = Color(1,1,1)
@export var bg = Color(0,0,0)
@export var bg_source = \"\"
@export var random_colors = false
@export var png = \"\"


signal texture_changed()


func _ready():
	
	randomize()
	if random_colors: bg = Color(randf(),randf(),randf())
	if random_colors: fg = Color(randf(),randf(),randf())
	
	var f = FileAccess.open(png, FileAccess.READ_WRITE)
	if f:
		img.load(png)
	else:
		img.create(size.x, size.y, 0, Image.FORMAT_RGB8)
		img.fill(Color.GRAY)
	
	itex.create_from_image(img)
#	itex.flags = 0
	texture = itex
#
#	scale.x = scale.x
#	if img.get_size().x != 0:
#		scale.x = get_parent().size.x / img.get_size().x
#	scale.y = scale.x
	
#	get_node(\"../Label\").text = png

#	if get_node(target):
#		get_node(target).texture = texture


var is_drawing = false
var mode = 0
func _gui_input(event):
	
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_LEFT: accept_event()
		mode = event.button_index
		is_drawing = event.pressed
		edit(event)
	
	if event is InputEventMouseMotion \\
	and is_drawing:
		edit(event)

#export var target = \"\"

#var old_img = img.data
func edit(event):
	
#	old_img = img.data
	
	false # img.lock() # TODOConverter40, Image no longer requires locking, `false` helps to not break one line if/else, so it can freely be removed
	if mode == MOUSE_BUTTON_LEFT:   img.set_pixel(event.position.x, event.position.y, fg)
	if mode == MOUSE_BUTTON_RIGHT:  img.set_pixel(event.position.x, event.position.y, bg)
	false # img.unlock() # TODOConverter40, Image no longer requires locking, `false` helps to not break one line if/else, so it can freely be removed
	itex.create_from_image(img)
	itex.flags = 0
	texture = itex
	

#	if get_node(target):
#		get_node(target).texture = texture
	
#	if img.data != old_img:
#	img.save_png(png)
	emit_signal(\"texture_changed\")
#	get_tree().call_group(\"desk\", \"reload\")


func _on_ColorPickerButton_color_changed(color):
	fg = color


func _on_ColorPickerButton3_color_changed(color):
	bg =  color

func _exit_tree():
	img.save_png(png)
"

[node name="Control" type="Control"]
clip_contents = true
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="Statusbar" type="Label" parent="."]
layout_mode = 0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 8.0
offset_top = -20.0
offset_right = -9.0
offset_bottom = -5.0
text = "Click buttons on canvas to: use tool, grab view, spin view"

[node name="ScrollBox" type="Control" parent="."]
anchors_preset = 0
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource("2")

[node name="origin" type="Control" parent="ScrollBox"]
anchors_preset = 0
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5

[node name="TextureRect" type="TextureRect" parent="ScrollBox/origin"]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
scale = Vector2(2, 2)
texture = ExtResource("1_yac6u")
stretch_mode = 4
script = SubResource("3")

[node name="tool" type="GridContainer" parent="."]
layout_mode = 0
offset_left = 8.0
offset_top = 8.0
offset_right = 60.0
offset_bottom = 231.0
columns = 2

[node name="1" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="2" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="3" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="4" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="9" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="5" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="6" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="7" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="8" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="10" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="11" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="12" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="13" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="14" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="15" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="16" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="17" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="18" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="19" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="20" type="Button" parent="tool"]
custom_minimum_size = Vector2(16, 16)
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
toggle_mode = true
action_mode = 0

[node name="option" type="VBoxContainer" parent="."]
layout_mode = 0
offset_left = 8.0
offset_top = 238.0
offset_right = 60.0
offset_bottom = 314.0

[node name="Control" type="Control" parent="option"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Control2" type="Control" parent="option"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Control3" type="Control" parent="option"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Control4" type="Control" parent="option"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="clipframe" type="Control" parent="."]
modulate = Color(1, 1, 1, 0.458824)
clip_contents = true
anchors_preset = 0
offset_left = 12.0
offset_top = 17.0
offset_right = 144.0
offset_bottom = 137.0
mouse_filter = 2

[node name="icons" type="TextureRect" parent="clipframe"]
layout_mode = 0
offset_top = 3.0
offset_right = 511.0
offset_bottom = 344.0
scale = Vector2(2, 2)
mouse_filter = 2
texture = ExtResource("2_5bpbu")
stretch_mode = 3
