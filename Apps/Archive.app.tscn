[gd_scene load_steps=5 format=3 uid="uid://dx7bvrj1la6dj"]

[ext_resource type="PackedScene" uid="uid://buwx0n4fnj28m" path="res://Controls/MillerColumns.tscn" id="1"]

[sub_resource type="GDScript" id="1"]
script/source = "extends Control

var debug = true
var verbose = false
@onready var miller = get_node(\"h/h/MillerColumns\")



func _ready():
	lscol_dynamic(null, \"/home/\"+OS.get_user_data_dir().split(\"/\")[2] )



func sibling_count():
	return get_parent().get_child_count()


func select_to_open(src_index, src_node):
	
	var path_to_open = src_node.get_item_metadata(src_index)
	
	var d = DirAccess.open(path_to_open)
	if d:
		miller.del_col_post(src_node.get_index())
		lscol_dynamic(src_node, path_to_open)
		miller.set_process(true)
	elif d.file_exists(path_to_open):
		pass


func lscon_dynamic_external(src_index, src_node):
	
	var path_to_open = src_node.get_item_metadata(src_index)
	
	if debug: printt(\"debug - \", \"lscon_dynamic_external:\", path_to_open)
	
	
	var d = DirAccess.open(path_to_open)
	
	if d and d.dir_exists(path_to_open):
		miller.del_col_post(src_node.get_index())
		lscol_dynamic(src_node, path_to_open)
		miller.set_process(true)
	
	elif d and d.file_exists(path_to_open):
		OS.shell_open(path_to_open)


func lscon_dynamic_external_multi(arg3,src_index, src_node):
	
	if debug: printt(\"debug - \", \"lscon_dynamic_external:\", src_index, src_node)

	miller.del_col_post(src_node.get_index())
	lscol_dynamic(src_node, src_node.get_item_metadata(src_index))
	miller.set_process(true)



func lscol_dynamic(src_col, path):
	
	if debug: printt(\"debug - \", \"lscol_dynamic:\", str(src_col), str(path) )
	
	var new_col = miller.add_col()
	new_col.connect(\"item_activated\",Callable(self,\"lscon_dynamic_external\").bind(new_col))
	new_col.connect(\"item_selected\",Callable(self,\"select_to_open\").bind(new_col))
	
	#ls
	var lst = global.ls(path)
	#folders
	for dir in lst.dirs:
		if path[-1] != \"/\": 
			path += \"/\"
		new_col.add_item(str(dir))
		new_col.set_item_metadata( new_col.get_item_count()-1, str(path,dir)) #set metadata for this last item
		if verbose: printt(new_col.get_item_count(), str(path,dir))
	#files
	for file in lst.files:
		new_col.add_item(str(file))
		new_col.set_item_metadata( new_col.get_item_count()-1, str(path,file)) #set metadata for this last item



func _on_bookmarks_item_activated(index):
	miller.del_col_post(-1)
	lscol_dynamic(null, find_child(\"bookmarks\").get_item_text(index))



func _on_Button_pressed():
	pass

"

[sub_resource type="GDScript" id="2"]
script/source = "extends ItemList


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[sub_resource type="GDScript" id="3"]
script/source = "extends ItemList

func _ready():
	add_item(\"TMSU service was not found, not file or directory tags will be used in this session.\")
"

[node name="Control" type="Control"]
clip_contents = true
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
size_flags_vertical = 3
script = SubResource("1")

[node name="h" type="HSplitContainer" parent="."]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0

[node name="V" type="VBoxContainer" parent="h"]
custom_minimum_size = Vector2(50, 0)
layout_mode = 2

[node name="bookmarks" type="ItemList" parent="h/V"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
select_mode = 1
item_count = 3
item_0/text = "/home"
item_1/text = "/"
item_2/text = "res://"
script = SubResource("2")

[node name="tags" type="ItemList" parent="h/V"]
visible = false
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
select_mode = 1
script = SubResource("3")

[node name="h" type="HSplitContainer" parent="h"]
layout_mode = 2
split_offset = 430
dragger_visibility = 2

[node name="MillerColumns" parent="h/h" instance=ExtResource("1")]
layout_mode = 2

[node name="details" type="Panel" parent="h/h"]
visible = false
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="ColorRect" type="ColorRect" parent="h/h/details"]
layout_mode = 0
offset_right = 84.0
offset_bottom = 360.0
size_flags_horizontal = 3
size_flags_vertical = 3
color = Color(1, 1, 1, 0.12549)

[node name="Open" type="Button" parent="h/h/details"]
layout_mode = 0
offset_right = 12.0
offset_bottom = 20.0
text = "Open"

[node name="Panel" type="Panel" parent="."]
visible = false
custom_minimum_size = Vector2(24, 24)
layout_mode = 0
anchor_right = 1.0

[node name="H" type="HBoxContainer" parent="Panel"]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2

[node name="Space" type="Control" parent="Panel/H"]
custom_minimum_size = Vector2(12, 12)
layout_mode = 2

[node name="Label" type="Label" parent="Panel/H"]
layout_mode = 2
text = "Sort"

[node name="OptionButton" type="OptionButton" parent="Panel/H"]
layout_mode = 2
tooltip_text = "Sort by"

[node name="CheckBox" type="CheckBox" parent="Panel/H"]
layout_mode = 2
tooltip_text = "Reverse"
action_mode = 0

[node name="H2" type="HBoxContainer" parent="Panel"]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
alignment = 1

[node name="Tag" type="Control" parent="Panel/H2"]
visible = false
layout_mode = 2

[node name="LineEdit" type="LineEdit" parent="Panel/H2/Tag"]
layout_mode = 0
offset_left = -99.0
offset_right = -41.0
offset_bottom = 24.0

[node name="Button" type="Button" parent="Panel/H2/Tag"]
layout_mode = 0
offset_left = -37.0
offset_right = -4.0
offset_bottom = 24.0
text = "Tag"

[node name="H3" type="HBoxContainer" parent="Panel"]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
alignment = 2

[node name="Label" type="Label" parent="Panel/H3"]
layout_mode = 2
text = "···"

[node name="Space4" type="Control" parent="Panel/H3"]
custom_minimum_size = Vector2(12, 12)
layout_mode = 2

[connection signal="item_activated" from="h/V/bookmarks" to="." method="_on_bookmarks_item_activated"]
[connection signal="item_selected" from="h/V/bookmarks" to="." method="_on_bookmarks_item_selected"]
[connection signal="pressed" from="Panel/H2/Tag/Button" to="." method="_on_Button_pressed"]
