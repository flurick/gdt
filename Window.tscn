[gd_scene load_steps=5 format=3 uid="uid://c4kpdo3fvc34i"]

[ext_resource type="Texture2D" uid="uid://cenjiblb1b630" path="res://png/max.png" id="1"]
[ext_resource type="Texture2D" uid="uid://1538tn0ybnvx" path="res://png/cross.png" id="2"]

[sub_resource type="GDScript" id="2"]
script/source = "extends Control

var held = {\"l\":false, \"r\":false, \"m\":false}
var grid = Vector2(100,100)
signal req_show_on_top (window)

var dock_icon

var title = \"App\" : set = set_title
func set_title(arg):
	title = arg
	find_child(\"title\").text = arg


func toggle_visible():
	visible = !visible


func _ready():
	custom_minimum_size = grid
	position = get_parent_control().size*0.5# - size*0.5
#	$V/header.custom_minimum_size = grid
	
	find_child(\"close\").connect(\"pressed\",Callable(self,\"close\"))
	find_child(\"size\").connect(\"pressed\",Callable(self,\"maximize\"))


var is_corner = false
func corner(event):
	
	if event is InputEventMouseButton:
		match event.button_index:
			MOUSE_BUTTON_LEFT:  is_corner = event.pressed

	if event is InputEventMouseMotion:
		if is_corner:  size += event.relative


func close():
	#play animation?
	dock_icon.queue_free()
	queue_free()



func maximize():
	position = Vector2(64,64)
	size = get_parent_control().size - Vector2(64,64)*2


func _gui_input(event):
	
	
	#pressed
	if event is InputEventMouseButton and event.pressed:
		match event.button_index:
			MOUSE_BUTTON_LEFT:  emit_signal(\"req_show_on_top\", self)
			MOUSE_BUTTON_MIDDLE:  pass
			MOUSE_BUTTON_RIGHT:  pass
		
	#held
	if event is InputEventMouseButton:
		match event.button_index:
			MOUSE_BUTTON_LEFT:  held.l = event.pressed
			MOUSE_BUTTON_MIDDLE:  held.m = event.pressed
			MOUSE_BUTTON_RIGHT:  held.r = event.pressed
	
	#drag
	if event is InputEventMouseMotion:
		if held.l:  position += event.relative
		if held.m:  pass
		if held.r:  size += event.relative
	
	#release
	if event is InputEventMouseButton and not event.pressed:
		match event.button_index:
			MOUSE_BUTTON_LEFT:  if Input.is_key_pressed(KEY_CTRL): position = position.snapped(grid)
			MOUSE_BUTTON_MIDDLE:  pass
			MOUSE_BUTTON_RIGHT:  if Input.is_key_pressed(KEY_CTRL): size = size.snapped(grid)



func _on_header_gui_input(event):
	if event is InputEventMouseButton\\
	and event.double_click:
		maximize()
"

[sub_resource type="GDScript" id="3"]
script/source = "extends Control

func _gui_input(event):
#	emit_signal(\"_gui_input\", event)
	get_parent().corner(event)
	
#	print(event)
#	#pressed
#	if event is InputEventMouseButton:
#		match event.button_index:
#			MOUSE_BUTTON_LEFT:  get_parent().held.l = true
"

[node name="Window" type="Panel"]
custom_minimum_size = Vector2(50, 50)
offset_right = 403.0
offset_bottom = 266.0
script = SubResource("2")

[node name="Corner" type="Control" parent="."]
anchors_preset = 0
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -15.0
offset_top = -15.0
offset_right = 15.0
offset_bottom = 14.0
mouse_default_cursor_shape = 12
script = SubResource("3")

[node name="ColorRect" type="ColorRect" parent="Corner"]
visible = false
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color(0.0862745, 0.894118, 1, 1)

[node name="V" type="VBoxContainer" parent="."]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0

[node name="header" type="Control" parent="V"]
clip_contents = true
custom_minimum_size = Vector2(40, 40)
layout_mode = 2
size_flags_horizontal = 3
mouse_filter = 1

[node name="center" type="HBoxContainer" parent="V/header"]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
size_flags_vertical = 3
mouse_filter = 2
alignment = 1

[node name="title" type="Button" parent="V/header/center"]
custom_minimum_size = Vector2(24, 24)
layout_mode = 2
mouse_filter = 1
disabled = true
text = "App"
flat = true

[node name="right" type="HBoxContainer" parent="V/header"]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
size_flags_horizontal = 3
size_flags_vertical = 3
mouse_filter = 2
alignment = 2

[node name="size" type="TextureButton" parent="V/header/right"]
custom_minimum_size = Vector2(40, 40)
layout_mode = 2
texture_normal = ExtResource("1")
stretch_mode = 3

[node name="ColorRect2" type="ColorRect" parent="V/header/right/size"]
visible = false
show_behind_parent = true
custom_minimum_size = Vector2(40, 40)
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
color = Color(0.690196, 0.788235, 0.894118, 1)

[node name="left" type="HBoxContainer" parent="V/header"]
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
offset_top = -1.43195
offset_bottom = -1.43195
size_flags_horizontal = 3
size_flags_vertical = 3
mouse_filter = 2

[node name="close" type="TextureButton" parent="V/header/left"]
custom_minimum_size = Vector2(40, 40)
layout_mode = 2
texture_normal = ExtResource("2")
stretch_mode = 3

[node name="ColorRect" type="ColorRect" parent="V/header/left/close"]
visible = false
show_behind_parent = true
custom_minimum_size = Vector2(40, 40)
layout_mode = 0
anchor_right = 1.0
anchor_bottom = 1.0
color = Color(0.894118, 0.690196, 0.690196, 1)

[node name="header_shadow" type="ColorRect" parent="V"]
custom_minimum_size = Vector2(1, 1)
layout_mode = 2
size_flags_horizontal = 3
color = Color(0.843137, 0.843137, 0.843137, 1)

[node name="app_container" type="Container" parent="V"]
clip_contents = true
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
mouse_filter = 2

[connection signal="gui_input" from="V/header" to="." method="_on_header_gui_input"]
