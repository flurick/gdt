[gd_scene load_steps=7 format=2]

[ext_resource path="res://png/max.png" type="Texture" id=1]
[ext_resource path="res://png/cross.png" type="Texture" id=2]

[sub_resource type="StyleBoxFlat" id=1]
bg_color = Color( 0.996078, 0.996078, 0.996078, 1 )
corner_radius_top_left = 5
corner_radius_top_right = 5
corner_radius_bottom_right = 5
corner_radius_bottom_left = 5
shadow_color = Color( 0, 0, 0, 0.0392157 )
shadow_size = 25

[sub_resource type="GDScript" id=2]
script/source = "extends Control

var held = {\"l\":false, \"r\":false, \"m\":false}
var grid = Vector2(100,100)
signal req_show_on_top (window)

var title = \"App\" setget set_title
func set_title(arg):
	title = arg
	find_node(\"title\").text = arg

func toggle_visible():
	visible = !visible

func _ready():
	rect_min_size = grid
#	$V/header.rect_min_size = grid
	
	find_node(\"close\").connect(\"pressed\", self, \"close\")


var corner = false
func corner(event):
	
	if event is InputEventMouseButton:
		match event.button_index:
			BUTTON_LEFT:  corner = event.pressed

	if event is InputEventMouseMotion:
		if corner:  rect_size += event.relative

func close():
	visible = false


func _gui_input(event):
	
	
	#pressed
	if event is InputEventMouseButton and event.pressed:
		match event.button_index:
			BUTTON_LEFT:  emit_signal(\"req_show_on_top\", self)
			BUTTON_MIDDLE:  pass
			BUTTON_RIGHT:  pass
		
	#held
	if event is InputEventMouseButton:
		match event.button_index:
			BUTTON_LEFT:  held.l = event.pressed
			BUTTON_MIDDLE:  held.m = event.pressed
			BUTTON_RIGHT:  held.r = event.pressed
	
	#drag
	if event is InputEventMouseMotion:
		if held.l:  rect_position += event.relative
		if held.m:  pass
		if held.r:  rect_size += event.relative
	
	#release
	if event is InputEventMouseButton and not event.pressed:
		match event.button_index:
			BUTTON_LEFT:  if event.control: rect_position = rect_position.snapped(grid)
			BUTTON_MIDDLE:  pass
			BUTTON_RIGHT:  if event.control: rect_size = rect_size.snapped(grid)

"

[sub_resource type="GDScript" id=3]
script/source = "extends Control

signal _gui_input(event)

func _gui_input(event):
#	emit_signal(\"_gui_input\", event)
	get_parent().corner(event)
	
#	print(event)
#	#pressed
#	if event is InputEventMouseButton:
#		match event.button_index:
#			BUTTON_LEFT:  get_parent().held.l = true
"

[sub_resource type="StyleBoxEmpty" id=4]

[node name="Window" type="Panel"]
margin_left = -150.0
margin_top = -71.0
margin_right = 230.0
margin_bottom = 91.0
rect_min_size = Vector2( 50, 50 )
custom_styles/panel = SubResource( 1 )
script = SubResource( 2 )

[node name="Corner" type="Control" parent="."]
editor/display_folded = true
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -15.0
margin_top = -15.0
margin_right = 15.0
margin_bottom = 14.0
mouse_default_cursor_shape = 12
script = SubResource( 3 )

[node name="ColorRect" type="ColorRect" parent="Corner"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
color = Color( 0.0862745, 0.894118, 1, 1 )

[node name="V" type="VBoxContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/separation = 0

[node name="header" type="Control" parent="V"]
margin_right = 380.0
margin_bottom = 40.0
rect_min_size = Vector2( 40, 40 )
rect_clip_content = true
mouse_filter = 2
size_flags_horizontal = 3

[node name="center" type="HBoxContainer" parent="V/header"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/separation = 0
alignment = 1

[node name="title" type="Button" parent="V/header/center"]
margin_left = 171.0
margin_right = 208.0
margin_bottom = 40.0
rect_min_size = Vector2( 24, 24 )
mouse_filter = 1
custom_styles/focus = SubResource( 4 )
custom_colors/font_color_disabled = Color( 0, 0, 0, 1 )
custom_colors/font_color = Color( 0, 0, 0, 1 )
custom_colors/font_color_hover = Color( 0, 0, 0, 1 )
custom_colors/font_color_pressed = Color( 0, 0, 0, 1 )
disabled = true
text = "App"
flat = true

[node name="right" type="HBoxContainer" parent="V/header"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/separation = 0
alignment = 2

[node name="size" type="TextureButton" parent="V/header/right"]
editor/display_folded = true
margin_left = 340.0
margin_right = 380.0
margin_bottom = 40.0
rect_min_size = Vector2( 40, 40 )
texture_normal = ExtResource( 1 )
expand = true
stretch_mode = 3

[node name="ColorRect2" type="ColorRect" parent="V/header/right/size"]
visible = false
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 40, 40 )
color = Color( 0.690196, 0.788235, 0.894118, 1 )

[node name="left" type="HBoxContainer" parent="V/header"]
anchor_right = 1.0
anchor_bottom = 1.0
mouse_filter = 2
size_flags_horizontal = 3
size_flags_vertical = 3
custom_constants/separation = 0

[node name="close" type="TextureButton" parent="V/header/left"]
editor/display_folded = true
margin_right = 40.0
margin_bottom = 40.0
rect_min_size = Vector2( 40, 40 )
texture_normal = ExtResource( 2 )
expand = true
stretch_mode = 3

[node name="ColorRect" type="ColorRect" parent="V/header/left/close"]
visible = false
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 40, 40 )
color = Color( 0.894118, 0.690196, 0.690196, 1 )

[node name="header_shadow" type="ColorRect" parent="V"]
margin_top = 40.0
margin_right = 380.0
margin_bottom = 41.0
rect_min_size = Vector2( 1, 1 )
size_flags_horizontal = 3
color = Color( 0.843137, 0.843137, 0.843137, 1 )

[node name="app_container" type="Container" parent="V"]
margin_top = 41.0
margin_right = 380.0
margin_bottom = 162.0
rect_clip_content = true
mouse_filter = 2
size_flags_horizontal = 3
size_flags_vertical = 3

